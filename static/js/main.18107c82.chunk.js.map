{"version":3,"sources":["components/utlis/API.js","components/header.js","components/dataheader.js","components/employeetemplate.js","App.js","serviceWorker.js","index.js"],"names":["getEmployeeList","axios","get","getEmployeeByGender","gender","getBaseBreedsList","header","state","users","handleInputChange","event","setState","search","target","value","handleFormSubmit","preventDefault","API","getEmployeeByName","then","res","data","status","Error","message","console","log","results","error","catch","err","Fragment","Navbar","bg","variant","Brand","href","Nav","className","React","Component","borders","height","padding","text","textAlign","dataheader","Container","style","Row","Col","Img","require","row","backgroundColor","picture","marginLeft","employeetemplate","searchEmp","Form","inline","FormControl","type","onChange","this","placeholder","map","user","src","large","name","first","last","cell","email","dob","date","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18107c82.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\r\n\r\nexport default {\r\n  getEmployeeList: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  },\r\n  getEmployeeByGender: function(gender) {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&gender=\" + gender);\r\n  },\r\n  getBaseBreedsList: function() {\r\n    return axios.get(\"https://dog.ceo/api/breeds/list\");\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nimport API from \"./utlis/API\";\r\n\r\nclass header extends React.Component {\r\n    state = {\r\n        users: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.getEmployeeList()\r\n            .then(res => this.setState({ users: res.data.results }))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        this.setState({ search: event.target.value });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        API.getEmployeeByName(this.state.search)\r\n            .then(res => {\r\n                if (res.data.status === \"error\") {\r\n                    throw new Error(res.data.message);\r\n                }\r\n                console.log(res)\r\n                this.setState({ results: res.data.message, error: \"\" });\r\n            })\r\n            .catch(err => this.setState({ error: err.message }));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"#home\"><h1>Employee Directory</h1></Navbar.Brand>\r\n                    <Nav className=\"mr-auto\">\r\n                    </Nav>\r\n                    \r\n                </Navbar>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n    export default header;\r\n","import React from \"react\";\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n\r\n  const borders = {\r\n    height: '80px',\r\n    padding: '25px'\r\n  };\r\n  const text = {\r\n      textAlign: 'center'\r\n  }\r\n\r\nfunction dataheader() {\r\n    return (\r\n        <React.Fragment>\r\n            <Container style={borders}>\r\n                <Row>\r\n                    <Col style={text}>Image</Col>\r\n                    <Col style={text}>Name</Col>\r\n                    <Col style={text}>Phone</Col>\r\n                    <Col style={text}>Email</Col>\r\n                    <Col style={text}>DOB</Col>\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default dataheader;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport API from \"./utlis/API\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport axios from \"axios\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nlet Img = require('react-image')\r\n\r\n\r\nconst row = {\r\n    backgroundColor: 'lightblue',\r\n    height: 'auto',\r\n};\r\nconst picture = {\r\n    padding: '5px',\r\n    textAlign: 'center',\r\n    marginLeft: '30px'\r\n\r\n};\r\nconst text = {\r\n    textAlign: 'center',\r\n    padding: '25px'\r\n\r\n}\r\n\r\n\r\n\r\nclass employeetemplate extends React.Component {\r\n    state = {\r\n        users: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.getEmployeeList()\r\n            .then(res => this.setState({ users: res.data.results }))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        const searchEmp = event.target.value\r\n        console.log(searchEmp)\r\n        API.getEmployeeByGender(searchEmp)\r\n            .then(res => {\r\n                if (res.data.status === \"error\") {\r\n                    throw new Error(res.data.message);\r\n                }\r\n                this.setState({ users: res.data.results, error: \"\" });\r\n            })\r\n            .catch(err => this.setState({ error: err.message }));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Form inline>\r\n                        <FormControl type=\"text\" onChange={this.handleFormSubmit} placeholder=\"Search by nationality\" className=\"mr-sm-2\" />\r\n                    </Form>\r\n                {this.state.users.map(user => (\r\n                    <Container style={row}>\r\n                        <Row>\r\n                            <Col style={picture}><Img src={user.picture.large} /></Col>\r\n                            <Col style={text}>{user.name.first} {user.name.last}</Col>\r\n                            <Col style={text}>{user.cell}</Col>\r\n                            <Col style={text}>{user.email}</Col>\r\n                            <Col style={text}>{user.dob.date}</Col>\r\n                        </Row>\r\n                    </Container>\r\n                ))}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default employeetemplate;\r\n\r\n\r\n\r\n","import React from 'react';\nimport Header from './components/header'\nimport DataHeader from './components/dataheader'\nimport Employeetemplate from './components/employeetemplate'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <DataHeader />\n      <Employeetemplate />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}